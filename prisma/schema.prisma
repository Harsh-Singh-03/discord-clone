// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  email                  String    @unique
  username               String    @unique
  name                   String
  password               String
  image                  String?
  bio                    String?
  provider               String?
  isEmailVerified        Boolean   @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  Server                 Server[]
  channels               Channel[]
  members                Member[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Server {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  bio        String?
  imageUrl   String
  inviteCode String    @unique
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  channels   Channel[]
  members    Member[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum ChannelAccess {
  EVERYONE
  MODS
  ADMIN_ONLY
}

// will add channel mode public & private
model Channel {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          ChannelType   @default(TEXT)
  whoCanMessage ChannelAccess @default(EVERYONE)
  isPrivate     Boolean       @default(false)
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId      String        @db.ObjectId
  messages      Message[]
  server        Server        @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  role      MemberRole @default(GUEST)
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId  String     @db.ObjectId
  messages  Message[]
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum MessageType {
  TEXT
  FILE
}

model Message {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  messageType MessageType @default(TEXT)

  memberId  String  @db.ObjectId
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}
